@model SANSurveyWebAPI.ViewModels.Web.RosterItemViewModel

@{
    ViewBag.Title = "Manage your roster";
}



<script id="event-template" type="text/x-kendo-template">
    <div>
        <div style="padding:5px;">
            #: kendo.toString(start, "hh:mm tt") # - #: kendo.toString(end, "hh:mm tt") # <br />
            #: title #
        </div>
    </div>
</script>


<script id="customEditorTemplate" type="text/x-kendo-template">
    <div class="k-edit-label"><label for="title">Title</label></div>
    <div data-container-for="title" class="k-edit-field">
        @*<input type="text" class="k-input k-textbox" name="title" required="required" data-bind="value:title">*@
        <input type="text" class="k-input k-textbox" name="title" data-bind="value:title" placeholder="On Shift">
    </div>
    <div class="k-edit-label">
        <label for="start">Start</label>
    </div>
    <div data-container-for="start" class="k-edit-field">
        <input type="text"
               data-role="datetimepicker"
               data-interval="15"
               data-type="date"
               data-bind="value:start,invisible:isAllDay"
               name="start" />
        <input type="text" data-type="date" data-role="datepicker" data-bind="value:start,visible:isAllDay" name="start" />
        <span data-bind="text: startTimezone"></span>
        <span data-for="start" class="k-invalid-msg" style="display: none;"></span>
    </div>
    <div class="k-edit-label"><label for="end">End</label></div>
    <div data-container-for="end" class="k-edit-field">
        <input type="text" 
               data-type="date" 
               data-role="datetimepicker" 
               data-bind="value:end,invisible:isAllDay" 
               name="end" 
               data-datecompare-msg="End date and time should be greater than or equal to the start date and time" />
        <input type="text" data-type="date" data-role="datepicker" data-bind="value:end,visible:isAllDay" name="end" data-datecompare-msg="End date and time should be greater than or equal to the start date and time" />
        <span data-bind="text: endTimezone"></span>
        <span data-bind="text: startTimezone, invisible: endTimezone"></span>
        <span data-for="end" class="k-invalid-msg" style="display: none;"></span>
    </div>

    @*<div data-container-for="offsetFromUTC" class="k-edit-field">
        <input type="text" class="k-input k-textbox" id="offsetFromUTC" name="offsetFromUTC" data-bind="value:offsetFromUTC">
    </div>*@


    @*<div class="k-edit-label"><label for="isAllDay">All day event</label></div>
        <div data-container-for="isAllDay" class="k-edit-field">
            <input type="checkbox" name="isAllDay" data-type="boolean" data-bind="checked:isAllDay">
        </div>*@
    @*<div class="k-edit-label"><label for="recurrenceRule">Repeat</label></div>*@
    @*<div data-container-for="recurrenceRule" class="k-edit-field">
            <div data-bind="value:recurrenceRule" name="recurrenceRule" data-role="recurrenceeditor"></div>
        </div>*@
    @*<div class="k-edit-label"><label for="description">Description</label></div>*@
    @*<div data-container-for="description" class="k-edit-field">
            <textarea name="description" class="k-textbox" data-bind="value:description"></textarea>
        </div>*@
    @*<div class="k-edit-label"><label for="ownerId">Owner</label></div>*@
    @*<div data-container-for="ownerId" class="k-edit-field">
            <select id="ownerId" data-bind="value:ownerId" data-role="dropdownlist"
                    data-value-field="value" data-text-field="text">
                <option value="1">Alex</option>
                <option value="2">Bob</option>
                <option value="3">Charlie</option>
            </select>
        </div>*@
</script>

<div class="adaptive-scheduler-wrapper">

    <div id="scheduler"></div>
    @*<button class="k-button" onclick="scrollToHour(10)">Scroll to 10 AM</button>*@
</div>

@*<div class="panel panel-default" id="Tasks">

        <div class="panel-heading">
            <h3><span class="fa fa-calendar"></span> &nbsp;@ViewBag.Title</h3>
        </div>

        <div class="panel-body">
        </div>
    </div>*@





<script>


    function scrollToHour(hour) {
        var time = new Date();
        time.setHours(hour);
        time.setMinutes(0);
        time.setSeconds(0);
        time.setMilliseconds(0);

        var scheduler = $("#scheduler").data("kendoScheduler");
        var contentDiv = scheduler.element.find("div.k-scheduler-content");
        var rows = contentDiv.find("tr");

        for (var i = 0; i < rows.length; i++) {
            var slot = scheduler.slotByElement(rows[i]);

            var slotTime = kendo.toString(slot.startDate, "HH:mm");
            var targetTime = kendo.toString(time, "HH:mm");

            if (targetTime === slotTime) {
                scheduler.view()._scrollTo($(rows[i]).find("td:first")[0], contentDiv[0]);
            }
        };
    }


    function pad(number, length) {
        var str = "" + number
        while (str.length < length) {
            str = '0' + str
        }
        return str
    }

    function getTimezoneName() {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
    }

    function getTimezoneOffset() {

        //var offset = moment().utcOffset();
        var offset = new Date().getTimezoneOffset()

        //offset = ((offset < 0 ? '+' : '-') + // Note the reversed sign!
        //       pad(parseInt(Math.abs(offset / 60)), 2) +
        //       pad(Math.abs(offset % 60), 2))

        return offset;
    }
  
    //function getTimezoneOffset() {
    //    var offset = new Date().getTimezoneOffset()
    //    return offset;
    //}

    $(document).ready(function () {


        alert(getTimezoneOffset() + " " + getTimezoneName());
        //kendo.culture("en-GB");

        $.ajaxSetup({ cache: false });

        var scheduler = $("#scheduler").kendoScheduler({
            mobile: true,
            //toolbar: [{ name: "pdf" }],
            allDaySlot: false,
            date: new Date(),
            startTime: new Date("2016/1/1 12:00 AM"),
            //height: 450,
            views: [
              "day",
              {
                  type: "week",
                  //selectedDateFormat: "{0:dd-MM-yyyy}",
                  dateHeaderTemplate: "<span class='k-link k-nav-day'>#=kendo.toString(date, 'ddd dd/M')#</span>",                  //dateHeaderTemplate: "<span class='k-scheduler-phone'>#=kendo.toString(date, 'dd-MM-yyyy')#</span>",
                  selected: true
              },
              "month"
            ],
            editable: {
                confirmation: "Are you sure you want to delete this roster time slot?",
                template: $("#customEditorTemplate").html(),
            },
            messages: {
                deleteWindowTitle: "Delete",
                editor: {
                    title: "On Shift",
                    editorTitle: "Roster Detail",
                }
            },
            eventTemplate: $("#event-template").html(),
            edit: function (e) {

                //debugger;
                //e.event.set('offsetFromUTC', getTimezoneOffset());

                //var recurrenceEditor = e.container.find("[data-role=recurrenceeditor]").data("customEditorTemplate");

                ////set start option value, used to define the week 'Repeat on' selected checkboxes
                //recurrenceEditor.setOptions({
                //    offsetFromUTC: getTimezoneOffset()
                //});

                //$("#offsetFromUTC").val(getTimezoneOffset());


            },
            //timezone: "Pacific/Auckland",
            timezone: "Etc/UTC",
            footer: {
                command: false
            },
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("Read", "Roster")",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: "POST"
                    },
                    update: {
                        url: "@Url.Action("Update", "Roster")",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: "POST"
                    },
                    create: {
                        url: "@Url.Action("Create", "Roster")",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: "POST"
                    },
                    destroy: {
                        url: "@Url.Action("Destroy", "Roster")",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        type: "POST"
                    },
                    parameterMap: function (options, operation) {
                        //if (operation === "read") {
                        //    //debugger;
                        //    var scheduler = $("#scheduler").data("kendoScheduler");
                        //    //var data = scheduler._data;

                        //    //debugger;
                        //    var result = {
                        //        //start: data[0].start,
                        //        //start: start(),
                        //        //end: data[0].end,
                        //        //start: scheduler.view().startDate(),
                        //        //end: scheduler.view().endDate(),

                        //        //title: scheduler.view().name(),
                        //        //offsetFromUTC: getTimezoneOffset()
                        //    }
                        //    return kendo.stringify(result);
                        //}
                        //if (operation === "update") {
                        //    //var scheduler = $("#scheduler").data("kendoScheduler");
                        //    //var data = scheduler._data;

                        //    debugger;
                        //    var result = {
                        //        //start: data[0].start,
                        //        //end: data[0].end,
                        //        //taskId: data[0].id,
                        //        //ownerId: data[0].ownerId,
                        //        //title: data[0].title,
                        //        offsetFromUTC: getTimezoneOffset()
                        //    }
                        //    return kendo.stringify(result);
                        //}
                        //if (operation === "create") {
                        //    var scheduler = $("#scheduler").data("kendoScheduler");
                        //    var data = scheduler._data;
                        //    debugger;
                        //    var result = {
                        //        start: data[0].start,
                        //        //start: start(),
                        //        end: data[0].end,
                        //        taskId: data[0].id,
                        //        ownerId: data[0].ownerId,
                        //        title: data[0].title,

                        //        //title: scheduler.view().name(),
                        //        offsetFromUTC: getTimezoneOffset()
                        //    }
                        //    return kendo.stringify(result);
                        //}

                        return kendo.stringify(options);
                    }
                },
                schema: {
                    //timezone: "Etc/UTC", //if uncommented, timezone gives a problem
                    model: {
                        id: "taskId",
                        fields: {
                            taskId: { from: "TaskID", type: "number" },
                            title: { from: "Title" },
                            start: { type: "date", from: "Start" },
                            end: { type: "date", from: "End" },
                            startTimezone: { from: "StartTimezone" },
                            endTimezone: { from: "EndTimezone" },
                            description: { from: "Description" },
                            recurrenceId: { from: "RecurrenceID" },
                            recurrenceRule: { from: "RecurrenceRule" },
                            recurrenceException: { from: "RecurrenceException" },
                            ownerId: { from: "OwnerID" },
                            isAllDay: { type: "boolean", from: "IsAllDay" }
                            //offsetFromUTC: { type: "number", from: "OffsetFromUTC" }

                        }
                    }
                },
            },
        });

        //scheduler.set('offsetFromUTC', getTimezoneOffset());

        //scheduler.set({ offsetFromUTC: getTimezoneOffset() }); //set the new startTime


        //var editor = $("#editor");
        //var template = kendo.template($("#editor-template").html());
        //var scheduler = $("#scheduler").data("kendoScheduler");

        //function destroyEditor() {
        //    kendo.destroy(editor);
        //    editor.find("button").off();
        //    editor.html("");
        //}

        //var currentEvent;

        //function editEvent(event) {
        //    destroyEditor();

        //    editor.html(template({}));
        //    kendo.bind(editor, event); //Bind the editor container (uses MVVM)

        //    editor.find("#save").click(function () {
        //        scheduler.dataSource.sync();
        //        destroyEditor();
        //    });

        //    editor.find("#cancel").click(function () {
        //        scheduler.dataSource.cancelChanges(currentEvent);
        //        destroyEditor();
        //    });
        //}

        //$("#BackButton").bind("click", function (e) {

        //    var button = $(this);
        //    bootbox.confirm("Are you sure to go back?", function (result) {
        //        if (result) {
        //            window.location.href = "http://localhost:62247/Register/Personal1"
        //        }
        //    });
        //});
    });

</script>




